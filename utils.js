export const fetchWithCache=(()=>{const n=new Map;return async e=>{if(n.has(e))return n.get(e);try{const t=await fetch(e);if(!t.ok)throw new Error(`Failed to fetch: ${e}`);const a=await t.json();return n.set(e,a),a}catch(n){return null}}})();export const debounce=(n,e)=>{let t;return(...a)=>{clearTimeout(t),t=setTimeout((()=>n(...a)),e)}};export class Modal{constructor(n){this.modal=document.getElementById(n),this.setupModal()}setupModal(){const n=this.modal.querySelector(".close");n&&n.addEventListener("click",(()=>this.close())),window.addEventListener("click",(n=>{n.target===this.modal&&this.close()}))}async open(n,e){const t=this.modal.querySelector(".modal-content");t.innerHTML="<div>Loading...</div>",this.modal.style.display="block";const a=await fetchWithCache(n);t.innerHTML=a&&e?e(a):"<div>Failed to load data</div>"}close(){this.modal.style.display="none"}}export const formatters={pokemonData:n=>{const{name:e="Unknown",id:t="N/A",height:a="N/A",weight:s="N/A",types:o=[],abilities:i=[],moves:r=[],held_items:d=[],species:l={},stats:v=[],sprites:c={}}=n,m=o.map((n=>{const e=n.type.url,t=e.slice(-3);return`<span class="type" data-url="${e}">\n              <img class="type" data-url="${e}" src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/types/generation-ix/scarlet-violet/${t.slice(0,2)}.png" />\n            </span>`})).join(""),g=i.map((n=>`<span class="ability" data-url="${n.ability.url}">${n.ability.name}</span>`)).join(", "),p=d.length>0?d.map((n=>`<span class="held-item" data-url="${n.item.url}">${n.item.name}</span>`)).join(", "):"None",h=v.map((n=>`\n        <div class="stat-item">\n          <span class="stat-name">${n.stat.name}:</span>\n          <div class="stat-bar-container">\n            <div class="stat-bar" style="width: ${n.base_stat/255*100}%;">\n              <span class="stat-value">${n.base_stat}</span>\n            </div>\n          </div>\n        </div>\n      `)).join(""),f=`\n        <div class="moves-container">\n          <div class="moves-header">\n            <h3>Moves</h3>\n            <div class="moves-search-container">\n              <input type="text" id="moveSearch" class="move-search" placeholder="Search moves..." autocomplete="off">\n            </div>\n          </div>\n          <div class="moves-list" id="movesList">\n            ${formatMovesList(r)}\n          </div>\n        </div>\n      `;return`\n        <div class="pokemon-details">\n          <div class="pokemon-images">\n          <div class="gif-div"><img src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/showdown/${t}.gif"></div>\n            <div><img src="${c.front_default}" alt="${e} default"/>\n            <img src="${c.front_shiny}" alt="${e} shiny"/></div>\n          </div>\n          \n          <div class="pokemon-basic-info">\n            <div><strong>Name:</strong> ${e}</div>\n            <div><strong>ID:</strong> ${t}</div>\n            <div><strong>Height:</strong> ${a/10}m</div>\n            <div><strong>Weight:</strong> ${s/10}kg</div>\n            <div><strong>Type(s):</strong> ${m}</div>\n            <div><strong>Species:</strong> <span class="species" data-url="${l.url}">${l.name}</span></div>\n            <div><strong>Abilities:</strong> ${g}</div>\n            <div><strong>Held Items:</strong> ${p}</div>\n          </div>\n  \n          <div class="pokemon-stats">\n            <h3>Base Stats</h3>\n            ${h}\n            <div>Total: ${v.reduce(((n,e)=>n+e.base_stat),0)}</div>\n          </div>\n  \n          ${f}\n        </div>\n      `},abilityData:n=>{const e=n.effect_entries.find((n=>"en"===n.language.name))||{};return`\n        <h2>Ability: ${n.name}</h2>\n        <strong>Effect:</strong> ${e.effect||"No effect data available"}<br>\n        <strong>Short Effect:</strong> ${e.short_effect||"No short effect available"}\n      `},moveData:n=>{const e=n.effect_entries.find((n=>"en"===n.language.name))||{};return`\n        <h2>Move: ${n.name}</h2>\n        <div><strong>Type:</strong> ${n.type.name}</div>\n        <div><strong>Power:</strong> ${n.power||"N/A"}</div>\n        <div><strong>Accuracy:</strong> ${n.accuracy||"N/A"}</div>\n        <div><strong>PP:</strong> ${n.pp}</div>\n        <div><strong>Damage Class:</strong> ${n.damage_class.name}</div>\n        <div><strong>Effect:</strong> ${e?.effect||"No effect data available"}</div>\n        <div><strong>Short Effect:</strong> ${e?.short_effect||"No short effect available"}</div>\n      `},typeData:n=>`\n      <h2>Type: ${n.name}</h2>\n      <div class="type-details">\n        <h3>Damage Relations</h3>\n        <div class="damage-section">\n          <strong>2x To:</strong> \n          ${n.damage_relations.double_damage_to.map((n=>n.name)).join(", ")||"None"}\n        </div>\n        <div class="damage-section">\n          <strong>1/2x To:</strong> \n          ${n.damage_relations.half_damage_to.map((n=>n.name)).join(", ")||"None"}\n        </div>\n        <div class="damage-section">\n          <strong>No Damage To:</strong> \n          ${n.damage_relations.no_damage_to.map((n=>n.name)).join(", ")||"None"}\n        </div>\n        <div class="damage-section">\n          <strong>2x From:</strong> \n          ${n.damage_relations.double_damage_from.map((n=>n.name)).join(", ")||"None"}\n        </div>\n        <div class="damage-section">\n          <strong>1/2x From:</strong> \n          ${n.damage_relations.half_damage_from.map((n=>n.name)).join(", ")||"None"}\n        </div>\n        <div class="damage-section">\n          <strong>No Damage From:</strong> \n          ${n.damage_relations.no_damage_from.map((n=>n.name)).join(", ")||"None"}\n        </div>\n      </div>\n    `,itemData:n=>`\n      <h2>Item: ${n.name}</h2>\n      <div class="item-details">\n        <img src="${n.sprites.default}" alt="${n.name}" />\n        <div><strong>Category:</strong> ${n.category.name}</div>\n        <div><strong>Cost:</strong> ${n.cost}</div>\n        <div><strong>Effect:</strong> ${n.effect_entries.find((n=>"en"===n.language.name))?.effect||"No effect description available"}</div>\n        <div><strong>Short Effect:</strong> ${n.effect_entries.find((n=>"en"===n.language.name))?.short_effect||"No short effect available"}</div>\n      </div>\n    `,speciesData:n=>`\n    <h2>Species: ${n.shape.name}</h2>\n    <div class="species-details">\n      <div><strong>Generation:</strong> ${n.generation.name}</div>\n      <div><strong>Habitat:</strong> ${n.habitat?.name||"Unknown"}</div>\n      <div><strong>Egg Group(s):</Strong>${n.egg_groups?.map((n=>n.name)).join(", ")||"None"}</div>\n      <div><strong>Hatch Speed:</strong> ${n.hatch_counter||"Unknown"}</div>\n      <div><strong>Color:</strong> ${n.color.name}</div>\n      <div><strong>Base Happiness:</strong> ${n.base_happiness}</div>\n      <div><strong>Capture Rate:</strong> ${n.capture_rate}</div>\n      <div><strong>Growth Rate:</strong> ${n.growth_rate.name}</div>\n      <div><strong>Baby Pokemon:</strong> ${n.is_baby?"Yes":"No"}</div>\n      <div><strong>Legendary:</strong> ${n.is_legendary?"Yes":"No"}</div>\n      <div><strong>Mythical:</strong> ${n.is_mythical?"Yes":"No"}</div>\n      <div class="flavor-text">\n        <h3>Pokedex Entries</h3>\n        ${n.flavor_text_entries.filter((n=>"en"===n.language.name)).map((n=>`\n            <div class="entry">\n              <strong>${n.version.name}:</strong>\n              ${n.flavor_text.replace(/\f/g," ")}\n            </div>\n          `)).join("")}\n      </div>\n    </div>\n  `,evolutionChainData:n=>{const e=n=>{let t=`\n        <div class="evolution-stage">\n          <div class="pokemon-link" data-species-url="${n.species.url}">\n            ${n.species.name}\n            ${(n=>{if(!n.length)return"";const e=n[0],t={item:n=>`Use ${n.name}`,known_move:n=>`Know ${n.name}`,location:n=>`Level-up @ ${n.name}`,min_happiness:n=>`Happiness ≥ ${n}`,min_level:n=>`Level ${n}`,min_affection:n=>`Affection level ${n}`,needs_overworld_rain:n=>n?"Requires overworld rain":null,party_species:n=>`With ${n.name} in party`,party_type:n=>`With Pokémon of type ${n.name} in party`,relative_physical_stats:n=>1===n?"Higher Attack than Defense":-1===n?"Lower Attack than Defense":"Equal Attack and Defense",time_of_day:n=>`During ${n}`,trade_species:n=>`Trade for ${n.name}`,turn_upside_down:n=>n?"Hold device upside-down":null},a=Object.keys(t).map((n=>{const a=e[n];return a?t[n](a):null})).filter(Boolean).join(", ");return a?`(${a})`:""})(n.evolution_details)}\n          </div>\n        </div>\n      `;return n.evolves_to.length>0&&(t+='<div class="evolution-arrow">→</div>',n.evolves_to.forEach((n=>{t+=e(n)}))),t};return`\n      <div class="evolution-chain">\n        <h3>Evolution</h3>\n        <div class="evolution-chain-container">\n          ${e(n)}\n        </div>\n      </div>\n    `}};export const formatMovesList=n=>n.map((n=>{const{move:e,version_group_details:t}=n,a=t[t.length-1],s=a.move_learn_method.name,o=a.level_learned_at;return`\n      <div class="move-item">\n        <span class="move" data-url="${e.url}">${e.name}</span>\n        <span class="move-details">\n          (${s}${o>0?` - Level ${o}`:""})\n        </span>\n      </div>\n    `})).join("");